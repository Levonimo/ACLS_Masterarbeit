import sys
import os

# Add the parent directory to sys.path
parent_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.append(parent_dir)

import master_class as mc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import pearsonr


Data = mc.DataPreparation("F:/Documents/MasterArbeit/Data")
data_files = Data.get_file_names()
Chromatograms = Data.get_list_of_chromatograms('Chromatograms_short', data_files)
rt = Data.get_retention_time()
# Example usage
# Create example 2D GC-MS data


reference = Chromatograms[data_files[7]]
target = Chromatograms[data_files[8]]

print(reference.shape)

# Normalize the reference and target chromatograms
norm_reference = reference / np.linalg.norm(reference)
norm_target = target / np.linalg.norm(target)

similarity = np.dot(norm_reference, norm_target.T)

# use softmax to normalize the similarity matrix
similarity = np.exp(similarity)
similarity /= np.sum(similarity)


# Berechne die Korrelation der beiden Matrizen entlang der Retentionszeit (axis=1 bedeutet über die Zeilen)
correlation_matrix = np.corrcoef(norm_reference, norm_target, rowvar=False)[:norm_reference.shape[1], norm_reference.shape[1]:]
'''
# Initialisieren der Korrelationsmatrix
correlation_matrix = np.zeros_like(similarity)
# Berechnen der Korrelation für jeden Datenpunkt
for i in range(norm_reference.shape[0]):  # Iteriere über die Retentionszeit
    for j in range(norm_reference.shape[0]):  # Iteriere über m/z-Werte
        # Berechnen der Pearson-Korrelation zwischen den Intensitäten an jedem Punkt
        correlation_matrix[i, j], _ = pearsonr(norm_reference[i, :], norm_target[j, :])

# Optional: Setze einen Schwellenwert, um nur signifikante Korrelationen anzuzeigen
threshold = 0.9
correlation_matrix[np.abs(correlation_matrix) < threshold] = 0
'''
print(26/(1417359360/91736894159978496)/60/24/365)
'''
# Define ref_length, tar_length
ref_length = len(reference)
tar_length = len(target)

# Plot the warping path plus the similarity matrix as a heatmap
plt.figure(figsize=(8, 6), dpi=200)
plt.imshow(similarity, aspect='auto', cmap='plasma', origin='lower', extent=(0, ref_length, 0, tar_length))
plt.title('Optimized Warping Path')
plt.xlabel('Index of Reference Signal')
plt.ylabel('Index of Target Signal')
plt.grid(False)
plt.colorbar(label='Log10 Similarity Score')
plt.show()

# Plot the warping path plus the similarity matrix as a heatmap
plt.figure(figsize=(8, 6), dpi=200)
plt.imshow(correlation_matrix, aspect='auto', cmap='plasma', origin='lower', extent=(0, ref_length, 0, tar_length))
plt.title('Optimized Warping Path')
plt.xlabel('Index of Reference Signal')
plt.ylabel('Index of Target Signal')
plt.grid(False)
plt.colorbar(label='Log10 Similarity Score')
plt.show()
'''